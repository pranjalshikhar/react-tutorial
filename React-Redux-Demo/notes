*Redux is a predictable state container for JavaScript applications.*
[Manage the state of your application in a predictable way, redux can help you.]

1. It is for JavaScript applications.
- Redux is not tied to React
- Can be used with Angular, Vue, and with Vanilla JavaScript.
- Redux is a library for JavaScript applications.
  
2. It is a state container.
- Redux stores the state of your application.
- Consider a react app - state of a component.
- State of an app is the state represented by all the individuals components of that app.
- Redux will store and manage the application state.

3. It is predictable.
- In Redux, all state transitions are explicit and it is possible to keep track of them.
- the changes of your application's state become predictable.


[Summary]
- React is the library used to build interfaces.
- Redux is the library for managing state in a predicatable way in JavaScript applications.
- React-Redux is a library that provides bindings to use react and Redux together in an application.




[Three-Core-Concepts]

Cake Shop Scenario     |  Redux    |  Purpose
-------------------------------------------------------------------------
Shop                   |  Store    |  Holds the state of your application
Intention to BUY_CAKE  |  Action   |  Describes what happened
Shopkeeper             |  Reducer  |  Ties the store and action together

A *store* that holds the state of your application.
An *action* that describes the changes in the state of your application.
A *reducer* which actually carries out the state transition depending on the action.


First principle -
*The state of your whole application is stored in an object tree within a single store.*
-> Maintain our application state in a single object which would be managed by the Redux store.

Cake Shop - 
Let's assume we are tracking the number of cakes on the shelf
{
    numberOfCakes: 10;
}


Second principle - 
*The only way to change the state is to emit an action, an object describing what happened.*
-> To update the state of your app, you need to let Redux know about that with an action.
-> Not allowed to directly update the state object.

Cake Shop - 
Let the shopkeeper know about the action: BUY_CAKE
{
    type: BUY_CAKE;
}


Third principle - 
*To specify how the state tree is tranformed by actions, you write pure reducers.*
Reducer - (previousState, action) => newState

Cake Shop - 
Reducer is the shopkeeper

const reducer = (state, action) => {
    switch(action.type) {
        case BUY_CAKE:
            return {
                numOfCakes: state.numOfCakes - 1
            }
    }
}



Redux Store
------------

*One store for the entire applicaation.*

Responsibilities - 
- Holds application state.
- Allows access to state via *getState()*
- Allows state to be updated via *dispatch(action)*
- Registers listeners via *subscribe(listener)*
- Handles unregistering of listeners via the function returned by subscribe(listener). 



[Middlewares]
- It is suggested to extend Redux with custom functionality.
- It provides the third-party extension point between dispatching an action, and the moment it reaches the reducer.
- Use middleware for logging, crash reporting, performing asynchronous tasks, etc. 